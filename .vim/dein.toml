#----------------------------------------------------
# 動作支援系プラグイン
#----------------------------------------------------

[[plugins]] 
repo = 'Shougo/dein.vim'

[[plugins]] 
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]] 
repo = 'scrooloose/nerdtree'
hook_add = '''
let NERDTreeShowHidden = 1

nnoremap sn gt
nnoremap sp gT
nnoremap st :<C-u>tabnew<CR>
nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
nnoremap <silent><Leader>e :NERDTreeSteppedOpen<CR>
nnoremap <silent><Leader>q :NERDTreeSteppedClose<CR>
'''

#----------------------------------------------------
# 視覚支援系プラグイン
#----------------------------------------------------

[[plugins]] 
repo = 'tomasr/molokai'

[[plugins]] 
repo = 'itchyny/lightline.vim'

[[plugins]] 
repo = 'Yggdroot/indentLine'
hook_add = '''
set conceallevel=0
'''

[[plugins]] 
repo = 'airblade/vim-gitgutter'

[[plugins]] 
repo = 'Xuyuanp/nerdtree-git-plugin'

#----------------------------------------------------
# 入力支援系プラグイン
#----------------------------------------------------

[[plugins]] 
repo = 'kentarosasaki/vim-emacs-bindings'

[[plugins]] 
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]] 
repo = 'terryma/vim-multiple-cursors'

[[plugins]] 
repo = 'vim-scripts/fcitx.vim'

[[plugins]] 
repo = 'fuenor/im_control.vim'
hook_add = '''
let IM_CtrlMode = 6
inoremap <silent> <C-l> <C-r>=IMState('FixMode')<CR>
'''

#----------------------------------------------------
# 言語支援系プラグイン
#----------------------------------------------------

[[plugins]] 
repo = 'neoclide/coc.nvim'
build = 'yarn install --frozen-lockfile'
hook_add = '''
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
'''
hook_post_update = '''
call coc#add_extension('coc-lists', 'coc-prettier', 'coc-highlight', 'coc-yaml', 'coc-html', 'coc-json', 'coc-css', 'coc-tsserver')
'''

[[plugins]] 
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {'_': {'hook/time/enable': '4', 'split': 'botright 8sp'}}
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
  \ 'runner'    : 'vimproc',
  \ 'runner/vimproc/updatetime' : 60,
  \ 'outputter' : 'error',
  \ 'outputter/error/success' : 'buffer',
  \ 'outputter/error/error'   : 'quickfix',
  \ 'outputter/buffer/split'  : ':rightbelow 8sp',
  \ 'outputter/buffer/close_on_empty' : 1,
  \ }

au FileType qf nnoremap <silent><buffer>q :quit<CR>

let g:quickrun_config.yarn = {'exec': 'yarn start'}
let g:quickrun_config.es = {'exec': 'node --experimental-modules --es-module-specifier-resolution=node %s'}
let g:quickrun_config.ts = {'exec': 'ts-node %s'}
'''

[[plugins]] 
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
let g:go_def_mapping_enabled = 0
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_of = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
hook_add = 'let g:vim_json_syntax_conceal = 0'

[[plugins]] 
repo = 'mattn/emmet-vim'

[[plugins]] 
repo = 'heavenshell/vim-jsdoc'
on_ft = ['javascript', 'javascript.jsx', 'typescript']

[[plugins]] 
repo = 'kannokanno/previm'
on_ft = 'markdown'

[[plugins]] 
repo = 'tyru/open-browser.vim'
on_ft = 'markdown' 

[[plugins]] 
repo = 'skanehira/translate.vim'
build = 'go get github.com/skanehira/gtran'
hook_add = 'noremap <silent><Leader>t :Translate<CR>'

