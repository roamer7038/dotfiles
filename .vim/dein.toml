#----------------------------------------------------
# 動作支援系プラグイン
#----------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
" KEYMAPを設定
nnoremap sn gt
nnoremap sp gT
" nnoremap st :<C-u>tabnew<CR>
" nnoremap sq :<C-u>q<CR>
nnoremap sQ :<C-u>bd<CR>
nnoremap <silent><Leader>e :NERDTreeFocus<CR>
nnoremap <silent><Leader>q :NERDTreeClose<CR>

" NERDTreeが最後のウィンドウになったら自動で閉じる
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" NERDTreeのみの場合はタブを閉じる
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" タブ間で同じNERDTreeを共有する
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
'''

#----------------------------------------------------
# 視覚支援系プラグイン
#----------------------------------------------------

[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
let g:molokai_original = 1
augroup colorschemeSetting
  autocmd!
  autocmd VimEnter * ++nested colorscheme molokai
	autocmd Colorscheme * highlight Normal ctermbg=none
	autocmd Colorscheme * highlight NonText ctermbg=none
	autocmd Colorscheme * highlight LineNr ctermbg=none
	autocmd Colorscheme * highlight Folded ctermbg=none
	autocmd Colorscheme * highlight EndOfBuffer ctermbg=none
augroup END
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
" set conceallevel=0
let g:indentLine_faster = 1
nmap <silent><Leader>i :<C-u>IndentLinesToggle<CR>
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

#----------------------------------------------------
# 入力支援系プラグイン
#----------------------------------------------------

[[plugins]]
repo = 'kentarosasaki/vim-emacs-bindings'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

# GitHubで要ログイン
[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
imap <silent><script><expr> <C-l> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true
'''

# [[plugins]]
# repo = 'terryma/vim-multiple-cursors'

# Linux Desktopを利用している場合は以下のプラグインを有効にする
#
# [[plugins]]
# repo = 'vim-scripts/fcitx.vim'
# if = 'filereadable("/usr/bin/fcitx")'
#
# [[plugins]]
# repo = 'fuenor/im_control.vim'
# hook_add = '''
# let IM_CtrlMode = 6
# inoremap <silent> <C-l> <C-r>=IMState('FixMode')<CR>
# '''

#----------------------------------------------------
# 言語支援系プラグイン
#----------------------------------------------------

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
let g:coc_disable_startup_warning = 1

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" <Tab>で次、<S+Tab>で前
inoremap <silent><expr> <TAB>
  \ coc#pum#visible() ? coc#pum#next(1):
  \ <SID>check_back_space() ? "\<Tab>" :
  \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<S-TAB>" " "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

nmap <silent> gl :<C-u>CocList<cr>
nmap <silent> gy :<C-u>call CocAction('doHover')<cr>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> g= <Plug>(coc-format)
'''
hook_post_update = '''
call coc#add_extension('coc-lists', 'coc-prettier', 'coc-eslint', 'coc-markdownlint', 'coc-sh', 'coc-highlight', 'coc-yaml', 'coc-html', 'coc-json', 'coc-css', 'coc-tsserver', 'coc-pyright')
'''
build = '''
npm install -g bash-language-server
npm install -g dockerfile-language-server-nodejs
'''
# Goの補完が必要な場合は以下を実行
# go install golang.org/x/tools/gopls@latest
# C++の補完が必要な場合は以下を実行
# :CocInstall coc-clangd
# :CocCommand clangd.install

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
  \ 'runner' : 'vimproc',
  \ 'runner/vimproc/updatetime' : 60,
  \ 'outputter' : 'buffer',
  \ 'outputter/buffer/opener': 'new',
  \ 'outputter/buffer/into': 1,
  \ 'outputter/buffer/close_on_empty': 1,
  \ }

nnoremap <leader>r :QuickRun<CR>
'''

[[plugins]]
repo = 'mattn/emmet-vim'

# [[plugins]]
# repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
let g:go_def_mapping_enabled = 0
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"
'''

[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = ['terraform', 'terraform-vars']

[[plugins]]
repo = 'cespare/vim-toml'
on_of = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
hook_add = 'let g:vim_json_syntax_conceal = 0'
on_ft = 'json'

#[[plugins]]
#repo = 'heavenshell/vim-jsdoc'
#on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescriptreact']
#build = 'make install'

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
hook_add = '''
let g:previm_wsl_mode = 1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = 'markdown'
